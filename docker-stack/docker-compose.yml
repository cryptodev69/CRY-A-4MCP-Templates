version: '3.8'

services:
  # Vector Database - Qdrant
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: cry-a-4mcp-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
      - ./config/qdrant:/qdrant/config
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Knowledge Graph Database - Neo4j
  neo4j:
    image: neo4j:5.15-community
    container_name: cry-a-4mcp-neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
      - ./config/neo4j:/conf
    environment:
      - NEO4J_AUTH=neo4j/cry-a-4mcp-password
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*,gds.*
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms_default__listen__address=0.0.0.0
      - NEO4J_dbms_connector_bolt_listen__address=0.0.0.0:7687
      - NEO4J_dbms_connector_http_listen__address=0.0.0.0:7474
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "cry-a-4mcp-password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Workflow Automation - n8n (disabled, using remote instance)
  # n8n:
  #   image: n8nio/n8n:1.19.4
  #   container_name: cry-a-4mcp-n8n
  #   ports:
  #     - "5678:5678"
  #   volumes:
  #     - n8n_data:/home/node/.n8n
  #     - ./config/n8n:/home/node/.n8n/config
  #     - ./workflows:/home/node/.n8n/workflows
  #   environment:
  #     - N8N_BASIC_AUTH_ACTIVE=true
  #     - N8N_BASIC_AUTH_USER=admin
  #     - N8N_BASIC_AUTH_PASSWORD=cry-a-4mcp-admin
  #     - N8N_HOST=0.0.0.0
  #     - N8N_PORT=5678
  #     - N8N_PROTOCOL=http
  #     - WEBHOOK_URL=http://localhost:5678
  #     - GENERIC_TIMEZONE=UTC
  #     - N8N_LOG_LEVEL=info
  #     - N8N_METRICS=true
  #     - N8N_DIAGNOSTICS_ENABLED=false
  #     - DB_TYPE=sqlite
  #     - DB_SQLITE_DATABASE=/home/node/.n8n/database.sqlite
  #   restart: unless-stopped
  #   depends_on:
  #     - qdrant
  #     - neo4j
  #   healthcheck:
  #     test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5678/healthz"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s

  # Redis for caching and session management
  redis:
    image: redis:7.2-alpine
    container_name: cry-a-4mcp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # CRY-A-4MCP Server
  cry-a-4mcp-server:
    build:
      context: ../starter-mcp-server
      dockerfile: Dockerfile
    container_name: cry-a-4mcp-server
    ports:
      - "8000:8000"
    volumes:
      - ./config/server:/app/config
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - CRYA4MCP_ENVIRONMENT=development
      - CRYA4MCP_LOG_LEVEL=INFO
      - CRYA4MCP_QDRANT_URL=http://qdrant:6333
      - CRYA4MCP_NEO4J_URI=bolt://neo4j:7687
      - CRYA4MCP_NEO4J_USERNAME=neo4j
      - CRYA4MCP_NEO4J_PASSWORD=cry-a-4mcp-password
      - CRYA4MCP_REDIS_URL=redis://redis:6379
      # The N8N_URL should be set in the .env file to point to your remote instance
      - CRYA4MCP_N8N_URL=${CRYA4MCP_N8N_URL}
    depends_on:
      qdrant:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: cry-a-4mcp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:10.2.3
    container_name: cry-a-4mcp-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=cry-a-4mcp-admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  qdrant_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  # n8n_data:
  #   driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: cry-a-4mcp-network
    driver: bridge

