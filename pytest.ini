[tool:pytest]
# Pytest configuration for CRY-A-4MCP test suite

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Output options
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --showlocals
    --durations=10
    --color=yes
    --disable-warnings
    --no-cov-on-fail
    --cov-fail-under=80
    --maxfail=5
    --timeout=300

# Test markers
markers =
    unit: Unit tests
    integration: Integration tests
    e2e: End-to-end tests
    performance: Performance tests
    security: Security tests
    slow: Slow running tests
    fast: Fast running tests
    api: API tests
    database: Database tests
    crawler: Crawler tests
    auth: Authentication tests
    validation: Input validation tests
    smoke: Smoke tests
    regression: Regression tests
    critical: Critical functionality tests
    external: Tests requiring external services
    mock: Tests using mocks
    real: Tests using real services

# Minimum version requirements
minversion = 7.0

# Test timeout (in seconds)
timeout = 300

# Asyncio configuration
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */venv/*
    */virtualenv/*
    */.venv/*
    */migrations/*
    */alembic/*
    */conftest.py
    */setup.py
    */manage.py
    */__pycache__/*
    */node_modules/*
    */static/*
    */media/*
    */locale/*
    */docs/*
    */build/*
    */dist/*
    */.git/*
    */.pytest_cache/*
    */.coverage/*
    */htmlcov/*
    */test_reports/*
    */coverage/*

branch = True
parallel = True
concurrency = multiprocessing,thread

[coverage:report]
# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover
    
    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug
    
    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError
    
    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:
    
    # Don't complain about abstract methods
    @(abc\.)?abstractmethod
    
    # Don't complain about type checking imports
    if TYPE_CHECKING:
    
    # Don't complain about platform specific code
    if sys.platform
    
    # Don't complain about deprecated code
    @deprecated
    warnings.warn

ignore_errors = True
show_missing = True
skip_covered = False
skip_empty = False
sort = Cover
precision = 2

[coverage:html]
directory = coverage/html
title = CRY-A-4MCP Test Coverage Report

[coverage:json]
output = coverage/coverage.json
pretty_print = True

[coverage:xml]
output = coverage/coverage.xml

# Logging configuration for tests
[tool:pytest_logging]
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = test_reports/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

log_auto_indent = true

# Filterwarnings
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::ResourceWarning
    error::FutureWarning
    # Ignore specific warnings from third-party libraries
    ignore:.*pkg_resources.*:DeprecationWarning
    ignore:.*distutils.*:DeprecationWarning
    ignore:.*imp module.*:DeprecationWarning
    # SQLAlchemy warnings
    ignore:.*SAWarning.*
    # Pydantic warnings
    ignore:.*pydantic.*:UserWarning
    # FastAPI warnings
    ignore:.*fastapi.*:UserWarning
    # Asyncio warnings
    ignore:.*asyncio.*:DeprecationWarning

# Test collection
collect_ignore =
    setup.py
    conftest.py
    migrations
    alembic
    venv
    virtualenv
    .venv
    node_modules
    static
    media
    locale
    docs
    build
    dist
    .git
    .pytest_cache
    htmlcov
    test_reports
    coverage

# Doctest configuration
doctest_optionflags = NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL ELLIPSIS
doctest_ignore_import_errors = true

# Cache configuration
cache_dir = .pytest_cache

# Parallel execution
# Use with pytest-xdist: pytest -n auto
# Or specify number of workers: pytest -n 4
dist = loadscope
tx = popen//python

# Performance monitoring
# Use with pytest-benchmark
benchmark-only = false
benchmark-sort = mean
benchmark-group-by = group
benchmark-timer = time.perf_counter
benchmark-disable-gc = false
benchmark-skip = false
benchmark-warmup = true
benchmark-warmup-iterations = 100000
benchmark-max-time = 1.0
benchmark-min-rounds = 5
benchmark-min-time = 0.000005
benchmark-columns = min,max,mean,stddev,median,iqr,outliers,ops,rounds,iterations
benchmark-histogram = false
benchmark-save = benchmark_results
benchmark-save-data = false
benchmark-compare-fail = mean:5%

# Memory profiling
# Use with pytest-memray
memray = false
memray-bin-path = test_reports/memray
memray-bin-prefix = test

# HTML report configuration
# Use with pytest-html
html = test_reports/report.html
self-contained-html = true

# JSON report configuration
# Use with pytest-json-report
json-report = true
json-report-file = test_reports/report.json
json-report-summary = true
json-report-omit = keywords

# JUnit XML report configuration
junit-xml = test_reports/junit.xml
junit-prefix = CRY-A-4MCP

# Test ordering
# Use with pytest-order
order-dependencies = true
order-group-scope = session

# Retry configuration
# Use with pytest-rerunfailures
reruns = 2
reruns-delay = 1

# Timeout configuration
# Use with pytest-timeout
timeout = 300
timeout-method = thread

# Environment variables for tests
env =
    TESTING = true
    ENVIRONMENT = test
    LOG_LEVEL = DEBUG
    DATABASE_URL = sqlite:///test.db
    REDIS_URL = redis://localhost:6379/1
    SECRET_KEY = test-secret-key-not-for-production
    JWT_SECRET_KEY = test-jwt-secret-key
    API_KEY_ENCRYPTION_KEY = test-api-key-encryption-key
    DISABLE_AUTH = false
    MOCK_EXTERNAL_APIS = true
    TEST_DATA_DIR = tests/data
    COVERAGE_PROCESS_START = .coveragerc