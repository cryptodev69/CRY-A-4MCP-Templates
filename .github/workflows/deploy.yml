name: Deploy Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/cry-a-4mcp-server

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./starter-mcp-server
        file: ./starter-mcp-server/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.cry-a-4mcp.com
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
        echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"
        
        # Here you would typically:
        # 1. Update your staging environment configuration
        # 2. Deploy via kubectl, docker-compose, or your deployment tool
        # 3. Run smoke tests
        
        # Example placeholder commands:
        # kubectl set image deployment/cry-a-4mcp-server cry-a-4mcp-server=${{ needs.build-and-push.outputs.image-tag }}
        # kubectl rollout status deployment/cry-a-4mcp-server
    
    - name: Run staging smoke tests
      run: |
        echo "Running staging smoke tests..."
        # Add your staging smoke tests here
        # curl -f https://staging.cry-a-4mcp.com/health
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "‚úÖ Staging deployment successful!"
        echo "Environment: staging"
        echo "Version: ${{ needs.build-and-push.outputs.image-tag }}"

  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://cry-a-4mcp.com
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Pre-deployment checks
      run: |
        echo "Running pre-deployment checks..."
        # Add pre-deployment validation here
        # - Database migration checks
        # - Service dependency checks
        # - Configuration validation
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
        echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"
        
        # Production deployment commands would go here
        # This might include:
        # 1. Blue-green deployment
        # 2. Rolling updates
        # 3. Database migrations
        # 4. Cache warming
        
        # Example placeholder:
        # kubectl set image deployment/cry-a-4mcp-server cry-a-4mcp-server=${{ needs.build-and-push.outputs.image-tag }}
        # kubectl rollout status deployment/cry-a-4mcp-server --timeout=600s
    
    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        # Add comprehensive health checks here
        # curl -f https://cry-a-4mcp.com/health
        # curl -f https://cry-a-4mcp.com/metrics
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "üöÄ Production deployment successful!"
        echo "Environment: production"
        echo "Version: ${{ needs.build-and-push.outputs.image-tag }}"
    
    - name: Rollback on failure
      if: failure()
      run: |
        echo "‚ùå Production deployment failed, initiating rollback..."
        # Add rollback logic here
        # kubectl rollout undo deployment/cry-a-4mcp-server

  security-scan-image:
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
    - name: Run Trivy vulnerability scanner on image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'

  notify:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Deployment notification
      run: |
        if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
          echo "üéâ Production deployment completed successfully!"
        elif [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
          echo "‚úÖ Staging deployment completed successfully!"
        else
          echo "‚ö†Ô∏è Deployment completed with issues. Check logs for details."
        fi
        
        echo "Build status: ${{ needs.build-and-push.result }}"
        echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
        
        # Here you could add notifications to:
        # - Slack/Discord
        # - Email
        # - PagerDuty
        # - Custom webhooks