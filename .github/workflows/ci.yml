name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black ruff mypy pytest pip-audit
        cd starter-mcp-server && pip install -r requirements.txt
    
    - name: Run Black formatter check
      run: |
        cd starter-mcp-server
        black --check --diff src/ tests/
    
    - name: Run Ruff linter
      run: |
        cd starter-mcp-server
        ruff check src/ tests/
    
    - name: Run MyPy type checking
      run: |
        cd starter-mcp-server
        mypy src/ --ignore-missing-imports
    
    - name: Security audit
      run: |
        cd starter-mcp-server
        pip-audit --requirement requirements.txt

  test-backend:
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd starter-mcp-server
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Run tests with coverage
      env:
        REDIS_URL: redis://localhost:6379
        ENVIRONMENT: test
      run: |
        cd starter-mcp-server
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing --cov-fail-under=80
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./starter-mcp-server/coverage.xml
        flags: backend
        name: backend-coverage

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint || echo "Frontend linting not configured yet"
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  docker-build:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./starter-mcp-server
        file: ./starter-mcp-server/Dockerfile
        push: false
        tags: cry-a-4mcp-server:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container -p 8000:8000 cry-a-4mcp-server:test
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop test-container

  integration-test:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Compose
      run: |
        cd docker-stack
        cp .env.example .env
        # Set test environment variables
        echo "ENVIRONMENT=test" >> .env
        echo "LOG_LEVEL=DEBUG" >> .env
    
    - name: Run integration tests
      run: |
        cd docker-stack
        docker-compose up -d --build
        sleep 30
        
        # Wait for services to be healthy
        timeout 120 bash -c 'until docker-compose ps | grep -q "healthy"; do sleep 5; done'
        
        # Run basic health checks
        curl -f http://localhost:8000/health
        
        # Cleanup
        docker-compose down -v

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './starter-mcp-server'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'